# non-space-comma-separated aliases <space> command

# NOTE: any !!parameters, if inside quotes, make sure they are double quotes

# Testing routines
test,t              echo "param1: !!param1, param2: !!param2, param3: !!param3"
test1               %self% test one two three
test_ref            %self% test one !!param2 three
test_all,ta         %self% test1 && %self% test_ref two

cmd_timeout,ct      num_secs=!!num_secs && ( !!cmd )& pid=$! ; sleep $num_secs ; disown $pid; kill -9 $pid

# pass helpers
# Use tmux, not xclip for copying the password to a 45-second ephemeral buffer
tmux-pass,pass      tmux set-buffer -b temp `pass show !!pass` ; (sleep 45 ; tmux delete-buffer -b temp) & >/dev/null

# Email
emailcompose,em         mutt -s !!subject !!recepient
emailsend,sendmail,sm   mutt -s !!subject !!recepient <<< !!body

# Calendar, contacts
cal_appts_format        addtl_format=!!addtl_format && calcurse -r!!numdays \
                        --format-apt="- %S-%E %m\n$addtl_format" \
                        --format-recur-apt="- %S-%E* %m\n$addtl_format"
cal_appts,appts,a       %self% cal_appts_format "" !!numdays
cal_appts_w_notes,an    %self% cal_appts_format "%N\n" !!numdays
cal_add                 directive=!!directive && echo "$directive" >> \
                        $XDG_CONFIG_HOME/calcurse/apts && echo -e "$directive\nAdded"
cal_appt_add,caa,aa     year=!!year && month=!!month && day=!!day && \
                        %self% cal_add "$month/$day/$year @ !!start_time"\
                        " -> $month/$day/$year @ !!endtime| "!!description
cal_event_add,cea,ea    year=!!year && month=!!month && day=!!day && \
                        %self% cal_add "$month/$day/$year [1] "!!description

# Weather
weather,w           curl http://wttr.in/?lang=fr&m | less -S 
weather_short,ws    curl wttr.in/?format=3\&m

# Music - Spotify
spotify             dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify \
                    /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.!!action >/dev/null
spotify_play,sp     %self% spotify PlayPause
spotify_next,sn     %self% spotify Next
spotify_back,sb     %self% spotify Previous

# Music - internal player
music,m             audio_control on
music_play,pp,p     audio_control pause
music_next,mn       audio_control next
music_back,mb       audio_control prev
music_beg,beg       audio_control replay

# Misc
most_used_cmd,muc   history | awk '{print $2}' | sort | uniq -c | sort -nr | head -20
commands,cm         $EDITOR $XDG_CONFIG_HOME/exec-cmd/commands

# Search within records each starting with regex !!rec_start_regex and containing !!pattern, returning entire record
search_txt_record,srl   pattern=!!pattern && \
                        sed -n "/!!rec_start_regex/{x;/$pattern/Ip;d}; \${x;G;/$pattern/Ip}; {H}"
# For indented lists starting with a header at 0th column, search for content, returning the entire list item
search_txt_list,stl     %self% search_txt_record !!pattern '^\w'
stl2                    %self% stl !!pattern1 | %self% stl !!pattern2 
search_md_section,smd   %self% search_txt_record !!pattern '^#'
sml2                    %self% smd !!pattern1 | %self% smd !!pattern2 

md_html_preview     lowdown !!md_file | w3m -T text/html
md_view_header_val  header=!!header && grep -iRl "^$header:" !!path | xargs sed -n "s/^$header:\s*//Ip"

list_tags,lt        (grep -o '@\w\+' | sort | uniq -c) < !!file
word_count,wc       tr -cs A-Za-z '\012' | tr A-Z a-z | \
                    egrep "\<.{!!min_chars,}\>" | sort | \
                    uniq -c | sort -nr | head -!!num_top_results
cat_dir             find !!dir -type f -exec cat {} \+
dir_word_count,dwc  %self% cat_dir !!dir | %self% word_count !!min_chars !!num_top_results
dir_num_files       find !!dir -type f | wc -l
#cpu_top             watch "ps -eo pcpu,args | sort -k 1 -r | head -4"
cpu_top             ps axch -o cmd:15,%cpu --sort=-%cpu | head -5
mem_top             ps axch -o cmd:15,%mem --sort=-%mem | head -5
mem_free            free -h | awk '/^Mem/ {print "Avail: " $7 "/" $2}'
# See https://stackoverflow.com/questions/17908555/printing-with-sed-or-awk-a-line-following-a-matching-pattern for explanation of below
cpu_temp            sensors | awk 'f{print $2;f=0} /ACPI/{f=1}'
wifi_status         echo -n "Wifi: "; \
                    cat /sys/class/net/w*/operstate; \
                    grep "^\s*w" /proc/net/wireless | awk '{ print int($3 * 100 / 70) "%" }'
youtube_audio_search,yta    mpv --no-video --ytdl-format=bestaudio ytdl://ytsearch:!!search_term
youtube_video_search,ytv    mpv ytdl://ytsearch:!!search_term
youtube,yt          maxheight=!!maxheight && \
                    mpv --ytdl-format="bestvideo[height<=$maxheight]+bestaudio/best[height<=$maxheight]" \
                    !!url


# Audio bitrate conversion
audio_bitrate       input_audio=!!input_audio && ffmpeg -i $input_audio -ab \
                    !!out_bitrate $(echo $input_audio | sed 's/\(\w\+\)\(\.\?\w*\)/\1_1\2/')
audio_bitrate_64    %self% audio_bitrate !!input_audio 64K
audio_bitrate_128   %self% audio_bitrate !!input_audio 128K

# Generate, record, and set a timeout for a random topic
record_rand_topic   audio_file="!!audio_prefix""_`date +%Y%m%d-%H%M-%S`" && \
                    topic=$(shuf -n 1 !!topic_file) && \
                    record -b 128K -a $audio_file && \
                    echo "$(basename $audio_file): $topic" >> !!log_file && \
                    timeout 60 sent <(echo "$topic" | fold -w 40) || \
                    timeout 30 sent <(echo "...60s passed") || \
                    timeout 30 sent <(echo "...90s passed") || \
                    echo "Time is up, finalize." | sent ; killrecording

# Generate, record, and set a timeout for a Toastmasters table topic
table_topic,tt      dir="$HOME/Documents/Recordings/Toastmasters" && \
                    %self% record_rand_topic $dir/table_topic \
                    $dir/365-tt-questions.txt $dir/table_topic_recordings

# Programming
lisp_eval,le        sbcl --noinform --non-interactive --eval !!sexp && echo

# File manipulation
ls_files_matching_tr        find . -maxdepth 1 -type f -iregex ".*!!regex.*" -exec ls -tr -1 {} \+
last_file_matching          %self% ls_files_matching_tr !!regex | tail -1 
last_file_having,lfh        results=$(grep -isl "!!regex" $(%self% ls_files_matching_tr '')) \
                            && [[ $results != "" ]] && ls -tr -1 $results | tail -1
exec_file_predicate         result=$(%self% !!function !!regex) && \
                            [[ $result != "" ]] && !!app $result || echo "No match"
exec_files_matching,efm     %self% exec_file_predicate ls_files_matching_tr !!regex !!app
exec_last_file_matching     %self% exec_file_predicate last_file_matching !!regex !!app
exec_last_file_having,elfh  %self% exec_file_predicate last_file_having !!regex !!app
exec_last_file,elf          %self% exec_last_file_matching "" !!app

# S3
s3short     sed 's&.*s3://[^/]*&&' # cut the leading bucket URI part
s3l         s3cmd ls s3://!!s3_bucket!!s3_dir | %self% s3short
s3lr        s3cmd ls -r s3://!!s3_bucket!!s3_dir | %self% s3short
s3g         s3cmd get s3://!!s3_bucket!!object

# Git
# List all repository URLs
git_rep_list        find !!root -regex '.*\.git/config*' -exec cat {} \; \
					| sed -n 's/.*url = \(.*\)/\1/p'
github_clone        git clone git@github.com:!!user/!!rep
github_add_push_remote  git remote add origin git@github.com:!!user/!!rep && \
                        git push -u origin --all
git_prune           git reflog expire --expire=now --all && \
                    git gc --aggressive --prune=now
# Extract a repository subfolder to a fresh repository, all contained files now at the root, history preserved: 
git_split_dir       newrep=!!newrep_dir && \
                    dir_prefix=!!dir_prefix && \
                    git subtree split --prefix=$dir_prefix --branch=split && \
                    git init --bare $newrep && \
                    git push $newrep split:master && \
                    git branch -D split && \
                    echo "Created bare rep $newrep." && \
                    echo "Next: 'rm -r' or filter out $dir_prefix/ "
# Eliminate all trace of a file and respective history in git
git_elim_file_hist  git filter-branch -f --index-filter \
                    "git rm --cached --ignore-unmatch !!filename" HEAD
git_rebase          git rebase -i HEAD~!!last_num_commits

# Image manipulation
# Shrink an image or a set of images to a maximum dimension size of !!max_size, maintaining the aspect ratio:
img_shrink_if_gt    size=!!max_size && mogrify "!!pattern[$size""x""$size"">]"

# Security
decrypt_view,dv gpg --decrypt --quiet !!encrypted_file | less

# Backup/sync functions
sync            /usr/bin/rsync --archive --verbose --cvs-exclude \
                --ignore-missing-args --human-readable --update \
                --prune-empty-dirs --progress --exclude='*.sw*p' "!!source" "!!dest" "!!addtnl_params"
# --recursive option is not implied with --files-from
sync_paths_from_file    from_file=!!from_file && %self% sync "!!source" \
						"!!dest" "--files-from=$from_file --recursive"
# Sync the src with only the files contained in the dest (using --files-from is quicker and safer than --existing)
sync_existing_only  src="!!src" dest="!!dest" && %self% sync "$src" "$dest" \
                        --files-from=<(find "$dest" -type f -printf '%P\n')

# TAR/GPG encryption
# !!destprefix: a full path w/ file prefix to be apended with date and extension
tar_encrypt         /bin/tar -zcvf - --files-from !!backuplistfile | \
                    /usr/bin/gpg -e > "!!destprefix""_`date +\%Y\%m\%d`.tar.gz.gpg"
tar_encrypt_path    %self% tar_encrypt <(echo !!path) !!destprefix 
